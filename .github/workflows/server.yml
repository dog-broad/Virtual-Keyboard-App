name: Build and Release ServerApp

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Upgrade pip and install build tools
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install pyinstaller

      - name: Install Python dependencies
        run: |
          pip install -r server/requirements.txt

      - name: Build executable
        run: |
          pyinstaller --name=ServerApp --onefile --windowed --icon='server/server.ico' --add-data="server/server.ico;." server/server.py

      - name: Upload executable as artifact
        uses: actions/upload-artifact@v3
        with:
          name: ServerApp
          path: dist/ServerApp.exe

  release:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write  # Needed to create and update releases

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y gh

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: ServerApp

      - name: Check if file exists
        run: |
          if [ -f "ServerApp.exe" ]; then
            echo "File ServerApp.exe found."
          else
            echo "File ServerApp.exe not found."
            exit 1
          fi

      - name: Get latest release tag
        id: get_release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          latest_release_tag=$(gh release list --limit 1 --json tagName -q '.[] | .tagName')
          echo "Latest release tag: $latest_release_tag"
          echo "latest_release_tag=$latest_release_tag" >> $GITHUB_ENV

      - name: Create or update release
        id: create_update_release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ -z "${{ env.latest_release_tag }}" ]; then
            echo "No release found. Creating a new release..."
            release_tag="v1.0.0"  # Replace with your versioning scheme
            gh release create $release_tag
            echo "Created new release with tag: $release_tag"
          else
            echo "Using existing release with tag: ${{ env.latest_release_tag }}"
          fi

      - name: Upload Release Asset
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          release_tag="${{ env.latest_release_tag }}"
          if [ -z "$release_tag" ]; then
            release_tag="v1.0.0"  # Ensure the tag is set if it was created
          fi
          gh release upload $release_tag ServerApp.exe --clobber
